# Extended make file for qubes-builder

################################################################################
#             E X T R A   M A K E F I L E   T A R G E T S
################################################################################

# Apply aliases and add TEMPLATE_LABEL if it does not already exist
ifdef DISTS_DEFINED
  alias_name = $(word 1,$(subst :, ,$(ALIAS)))
  alias_flavor = $(word 2,$(subst :, ,$(ALIAS)))
  template_name = $(subst +,-,$(alias_name))
  aliases = $(filter $(alias_flavor), $(patsubst $(alias_name), $(alias_flavor), $(DISTS_VM))) \
                     $(if $(filter $(alias_flavor):$(template_name), $(TEMPLATE_LABEL)),, \
                         $(eval TEMPLATE_LABEL += $(alias_flavor):$(template_name)))
  DISTS_VM := $(strip $(foreach ALIAS, $(TEMPLATE_ALIAS), $(aliases)))
endif

# Remove any unused labels
ifdef DISTS_DEFINED
  template_flavor = $(word 1,$(subst :, ,$(LABEL)))
  template_name = $(word 2,$(subst :, ,$(LABEL)))
  labels = $(filter $(filter $(template_flavor), $(DISTS_VM)):$(template_name), $(LABEL))
  TEMPLATE_LABEL := $(strip $(foreach LABEL, $(TEMPLATE_LABEL), $(labels)))
endif

# Get rid of quotes
TEMPLATE_FLAVOR := $(shell echo $(TEMPLATE_FLAVOR))
WHONIX_DIR := $(shell echo $(WHONIX_DIR))
DEPENDENCIES := $(shell echo $(DEPENDENCIES))

# Add / Remove Whonix components based on if Whonix is being built
ifneq (,$(findstring wheezy+whonix, $(DISTS_VM)))
  WHONIX := 1
  COMPONENTS := $(COMPONENTS) $(WHONIX_COMPONENTS)
  TEMPLATE := $(TEMPLATE) $(WHONIX_COMPONENTS)
else
  COMPONENTS := $(filter-out $(WHONIX_COMPONENTS), $(COMPONENTS))
  TEMPLATE := $(filter-out $(WHONIX_COMPONENTS), $(TEMPLATE))
endif

# Sets the COMPONENTS to only what is needed to build the template
ifeq ($(TEMPLATE_ONLY), 1)
  COMPONENTS := $(TEMPLATE)
  DIST_DOM0 :=
endif

ifneq (,$(findstring wheezy, $(DISTS_VM))$(findstring jessie, $(DISTS_VM)))
  COMPONENTS += builder-debian
  BUILDER_PLUGINS += builder-debian
endif
ifneq (,$(findstring trusty, $(DISTS_VM))$(findstring utopic, $(DISTS_VM))$(findstring vivid, $(DISTS_VM)))
  COMPONENTS += builder-debian
  BUILDER_PLUGINS += builder-debian
endif
ifneq (,$(findstring archlinux, $(DISTS_VM)))
  COMPONENTS += builder-archlinux
  BUILDER_PLUGINS += builder-archlinux
endif

# Set current branch for builder so it does not change to master
BRANCH_builder := $(shell git rev-parse --abbrev-ref HEAD)

.PHONY: umount
umount:
	-@dir="$$(readlink -m .)"; \
	$(SRC_DIR)/builder-debian/scripts/umount_kill.sh "$$dir/qubes-src/"; \
	for dist in $(DISTS_VM) $(DIST_DOM0); do \
	    dist=$${dist%%+*}; \
	    $(SRC_DIR)/builder-debian/scripts/umount_kill.sh "$$dir/chroot-$$dist"; \
	done;

.PHONY: patch
patch::
	# Move a generic Makefile.builder over to non-qubes packages so they can be
	# built with qubes-builder
	@echo "Applying pathces..."; \
	repos=$(addprefix $(SRC_DIR)/,"whonix-setup-wizard python-guimessages qubes-whonix"); \
	for repo in $$repos; do \
	    if [ -d "$$repo" ]; then \
	            echo "Applying whonix related patches to $$repo..."; \
	            cp -pf $(SRC_DIR)/builder-debian/scripts/Makefile.builder $$repo ; \
	    fi \
	done;

.PHONY: install-deps
install-deps::
	@sudo yum install -y $(DEPENDENCIES)

build-info::
	@echo "=========================================================="
	@echo "Build Info:"
	@echo "=========================================================="
	@echo "DISTS_VM        = $(DISTS_VM)"
	@echo "DISTS_ALL       = $(DISTS_ALL)"
	@echo "DIST_DOM0       = $(DIST_DOM0)"
	@echo "BUILDER_PLUGINS = $(BUILDER_PLUGINS)" 
	@echo "TEMPLATE        = $(TEMPLATE)"
	@echo "GIT_REPOS       = $(GIT_REPOS)"
	@echo "COMPONENTS      = $(COMPONENTS)"
	@echo "TEMPLATE_LABEL  = $(TEMPLATE_LABEL)"
	@echo

.PHONY: get-sources
get-sources:: COMPONENTS := $(filter-out builder $(BUILDER_PLUGINS), $(COMPONENTS))
get-sources:: COMPONENTS := $(BUILDER_PLUGINS) $(COMPONENTS)
get-sources:: GIT_REPOS := $(addprefix $(SRC_DIR)/, $(COMPONENTS))
get-sources:: build-info
	@true

.PHONY: template-modules
template-modules:: COMPONENTS :=  $(TEMPLATE)
template-modules:: umount patch build-info qubes-vm
	@echo "Creating template modules..."

qubes-vm:: COMPONENTS := $(TEMPLATE)
qubes-vm:: 
	@true

.PHONY: template

template linux-template-builder:: umount build-info
	@echo "Creating template(s)..."

#.PHONY: clean-rpms 
clean-rpms:: clean-installer-rpms
	@for dist in $(shell ls qubes-rpms-mirror-repo/); do \
	    echo "Cleaning up debs in qubes-pkgs-mirror-repo/$$dist/dists/..."; \
	    sudo rm -rf qubes-pkgs-mirror-repo/$$dist/dists/* || true ;\
	    echo "Cleaning up debs in qubes-pkgs-mirror-repo/$$dist/deb/..."; \
	    sudo rm -rf qubes-pkgs-mirror-repo/$$dist/deb/* || true ;\
	done
	@echo 'Cleaning up deb in qubes-src/*/deb/*...'; \
	sudo rm -rf qubes-src/*/deb/* || true;

# Does a regular clean as well as removes all prepared and created tempalte
# images and chroot-*
# About the only items left in tact are is the qubes-src directory tree
.PHONY: mostlyclean
mostlyclean:: umount clean clean-rpms
	@dir="$$(readlink -m .)"; \
	pkgdir="$$dir/qubes-src/linux-template-builder"; \
	if [ -d "$$pkgdir" ] ; then \
	    pushd "$$pkgdir"; \
	    sudo rm -rf prepared_images/*  || true; \
	    sudo rm -rf qubeized_images/*  || true; \
	    sudo rm -rf rpm/noarch/*  || true; \
	    sudo rm -rf pkgs-for-template/* || true; \
	    popd; \
	fi; \
	dists=(); \
	for dist in $(DISTS_VM) $(DIST_DOM0) "chroot-debian"; do \
	    dist=$${dist%%+*}; \
	    if [[ ! $${dists[@]} =~ $$dist ]] ; then \
	        dists+=("$${dist}"); \
	        sudo rm -rf $$dir/chroot-$$dist || true; \
	    fi; \
	done; \
	sudo rm -rf $$dir/qubes-pkgs-mirror-repo/repodata/* || true;

.PHONY: clean-chroot
clean-chroot:: 
	@dists="$(shell ls -d chroot-*)"; \
	for dist in $$dists; do \
	    $(SRC_DIR)/builder-debian/scripts/umount_kill.sh "$$dist"; \
	    sudo rm -rf "$$dist"; \
	done

.PHONY: clean-all
clean-all:: umount clean-chroot
	@dir="$$(readlink -m .)"; \
	sudo rm -f $$dir/qubes-pkgs-mirror-repo/repodata/* || true;

# Returns variable value
# Example usage: GET_VAR=DISTS_VM make get-var
.PHONY: get-var
get-var::
	@GET_VAR=$${!GET_VAR}; \
	echo "$${GET_VAR}"

about::
	@echo "extended-rules.conf"

# vim: filetype=make
